1. Use nested loop to print square pattern 
 eg : 
* * * * 
* * * * 
* * * * 
* * * * 
solution :

public class SquarePattern {
    public static void main(String[] args) {
        int n = 4;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                System.out.print("* ");
            }
            System.out.println(); 
        }
    }
}

2. Right-Angled Triangle
eg :
* 
* * 
* * * 
* * * * 
solution :

public class RightAngledTriangle {
    public static void main(String[] args) {
        int n = 4;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println(); 
        }
    }
}

3. Inverted Triangle
eg:
* * * * * 
* * * * 
* * * 
* * 
* 
solution :

public class InvertedTriangle {
    public static void main(String[] args) {
        int n = 5;
        for (int i = n; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

4. Number Pyramid
eg:
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

solution :

public class NumberPyramid {
    public static void main(String[] args) {
        int n = 5; 
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println(); // move to next line after each row
        }
    }
}

5. Pyramid Pattern
eg :
    *
   ***
  *****
 *******
*********
solution :

public class PyramidPattern {
    public static void main(String[] args) {
        int n = 5; 
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println(); 
        }
    }
}

6.diamond shapes

solution :

public class DiamondShape {
    public static void main(String[] args) {
        int n = 5; 
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = n - 1; i >= 1; i--) {
            for (int j = n; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

7.Hollow Patterns

solution :

public class HollowPyramid {
    public static void main(String[] args) {
        int n = 5; 
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                if (k == 1 || k == (2 * i - 1) || i == n)
                    System.out.print("*");
                else
                    System.out.print(" ");
            }
            System.out.println();
        }
    }
}
8. Floydâ€™s Triangle

solution :

public class FloydsPyramid {
    public static void main(String[] args) {
        int n = 4;  
        int num = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = i; j < n; j++) {
                System.out.print("  "); 
            }
            for (int k = 1; k <= i; k++) {
                System.out.print(num + "   "); 
                num++;
            }

            System.out.println(); 
        }
    }
}




